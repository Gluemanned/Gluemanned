#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

#define WIFI_SSID "RT-WiFi-8e8c"
#define WIFI_PASSWORD "mJ+mBYkfL5"
#define BOT_TOKEN "7972302630:AAHvu4TdkLgxzkx7r8HRDqBF9lvgZwChdvE"
#define BME280_ADDR 0x77 

#define PUMP_PIN 17 // PWMB
#define PUMP_CHANNEL 2
#define PUMP_FREQ 5000
#define PUMP_RESOLUTION 8

Adafruit_BME280 bme;
WiFiClientSecure client;
UniversalTelegramBot bot(BOT_TOKEN, client);
unsigned long bot_lasttime = 0;
bool bme_status = false;
bool isWatering = false; // –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª–∏–≤–∞

void setup() {
  Serial.begin(115200);

  pinMode(PUMP_PIN, OUTPUT);
  digitalWrite(PUMP_PIN, LOW); // –°–Ω–∞—á–∞–ª–∞ –≤—ã–∫–ª—é—á–∞–µ–º –ø–∏–Ω
  ledcAttachPin(PUMP_PIN, PUMP_CHANNEL);
  ledcSetup(PUMP_CHANNEL, PUMP_FREQ, PUMP_RESOLUTION);
  ledcWrite(PUMP_CHANNEL, 0); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã–∫–ª—é—á–∞–µ–º –®–ò–ú

  Wire.begin(21, 22);
  delay(100);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  
  Serial.print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi");
  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startTime < 30000) {
    delay(500);
    Serial.print(".");
  }
  
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\n–û—à–∏–±–∫–∞ Wi-Fi!");
    ESP.restart();
  }
  Serial.println("\nWi-Fi –ø–æ–¥–∫–ª—é—á–µ–Ω! IP: " + WiFi.localIP().toString());

  bme_status = bme.begin(BME280_ADDR, &Wire);
  if (!bme_status) Serial.println("–û—à–∏–±–∫–∞ BME280!");
}

void smoothPumpControl(int start, int end, int step, int delay_ms) {
  for (int value = start; value != end; value += step) {
    ledcWrite(PUMP_CHANNEL, value);
    delay(delay_ms);
  }
}

void handleNewMessages(int numNewMessages) {
  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = bot.messages[i].chat_id;
    String text = bot.messages[i].text;
    String from_name = bot.messages[i].from_name;

    if (text == "/start") {
      String welcome = "–ü—Ä–∏–≤–µ—Ç, " + from_name + "!\n";
      welcome += "üå± –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ —É–º–Ω–æ–≥–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è MGBOT.\n";
      welcome += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n";
      welcome += "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.\n";
      welcome += "/report - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞.\n";
      welcome += "/water - –ú–µ–Ω—é –ø–æ–ª–∏–≤–∞.\n";
      welcome += "/stop - –ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–º–ø—ã.";
      bot.sendMessage(chat_id, welcome, "Markdown");
    }
    else if (text == "/status") {
      String status_msg = "üîß *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*\n";
      status_msg += "Wi-Fi: " + String(WiFi.SSID()) + "\n";
      status_msg += "IP: " + WiFi.localIP().toString() + "\n";
      status_msg += "–î–∞—Ç—á–∏–∫: " + String(bme_status ? "üü¢ OK" : "üî¥ –û—à–∏–±–∫–∞") + "\n";
      status_msg += "–ù–∞—Å–æ—Å: " + String(isWatering ? "üí¶ –í–ö–õ" : "üö´ –í–´–ö–õ");
      bot.sendMessage(chat_id, status_msg, "Markdown");
    }
    else if (text == "/report") {
      String report_msg = "üìä *–î–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞:*\n";
      if (bme_status) {
        report_msg += "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(bme.readTemperature(), 1) + " ¬∞C\n";
        report_msg += "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: " + String(bme.readHumidity(), 1) + " %\n";
        report_msg += "‚è± –î–∞–≤–ª–µ–Ω–∏–µ: " + String(bme.readPressure() / 100.0F, 1) + " hPa";
      } else {
        report_msg += "‚ö†Ô∏è –î–∞—Ç—á–∏–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ";
      }
      bot.sendMessage(chat_id, report_msg, "Markdown");
    }
    else if (text == "/water") {
      String water_msg = "üí¶ *–ú–µ–Ω—é –ø–æ–ª–∏–≤–∞:*\n";
      water_msg += "/automatic - –ê–≤—Ç–æ–ø–æ–ª–∏–≤ (15 —Å–µ–∫).\n";
      water_msg += "/manual - –ü–æ–ª–∏–≤ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n";
      bot.sendMessage(chat_id, water_msg, "Markdown");
    }
    else if (text == "/automatic") {
      if (isWatering) {
        bot.sendMessage(chat_id, "‚ö†Ô∏è –ù–∞—Å–æ—Å —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!", "");
        return;
      }
      
      isWatering = true;
      bot.sendMessage(chat_id, "üíß –ê–≤—Ç–æ–ø–æ–ª–∏–≤ –Ω–∞ 15 —Å–µ–∫ –Ω–∞—á–∞–ª—Å—è.", "Markdown");
      
      smoothPumpControl(0, 255, 5, 30); // –ü–ª–∞–≤–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ
      delay(15000);
      smoothPumpControl(255, 0, -5, 30); // –ü–ª–∞–≤–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ
      
      isWatering = false;
      bot.sendMessage(chat_id, "‚úÖ –ê–≤—Ç–æ–ø–æ–ª–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.", "Markdown");
    }
    else if (text == "/manual") {
      if (isWatering) {
        bot.sendMessage(chat_id, "‚ö†Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–∏–≤–∞!", "");
        return;
      }
      
      bot.sendMessage(chat_id, "üí¶ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–ª–∏–≤–∞ (1-300 —Å–µ–∫):", "");
      
      unsigned long timeout = millis() + 30000;
      while (millis() < timeout) {
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
        if (numNewMessages) {
          String time_str = bot.messages[0].text;
          int watering_time = time_str.toInt();
          
          if (watering_time >= 1 && watering_time <= 300) {
            isWatering = true;
            bot.sendMessage(chat_id, "üí¶ –ü–æ–ª–∏–≤ –Ω–∞ " + time_str + " —Å–µ–∫ –Ω–∞—á–∞–ª—Å—è.", "Markdown");
            
            smoothPumpControl(0, 255, 5, 30);
            delay(watering_time * 1000);
            smoothPumpControl(255, 0, -5, 30);
            
            isWatering = false;
            bot.sendMessage(chat_id, "‚úÖ –ü–æ–ª–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.", "Markdown");
            break;
          } else {
            bot.sendMessage(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 300!", "");
            break;
          }
        }
        delay(500);
      }
    }
    else if (text == "/stop") {
      ledcWrite(PUMP_CHANNEL, 0);
      isWatering = false;
      bot.sendMessage(chat_id, "üõë –ù–∞—Å–æ—Å –∞–≤–∞—Ä–∏–π–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", "Markdown");
    }
  }
}

void loop() {
  if (millis() - bot_lasttime > 1000) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    while (numNewMessages) {
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    bot_lasttime = millis();
  }
}
